Depends on ruby-assertions

In all database driven application I need the following:

  1) declare model
  3) create scheme, update scheme, migrations
  2) derive forms from model
    This also could be "only derive html input fields :A,:B,:C from table foo"

With active record like code this just doesn't work, because you have to edit
so many places - no way to get your job done fast

So this library provides a way to declare a model, it allows you to attach
constraints and it derives scheme upgrades for you.


backends:

ActiveRecord. Status:
  creating migrations works, initial indexes support

  creating model classes: missing


Example

First declare a model, thus

  - specify tables
  - fields
  - checking
  - how to derive HTML forms and similar

  The model, relation, fields have an option hash as property store
  making it most simple to add your own information.

  model = Model.new do |m|
    m.relation(:user) do |r|
      r.primary
      r.string :username, :comment => 'mandatory username'
      r.string :password, :comment => 'mandatory username'
      r.has_n(:login_attempts)
    end

    m.relation(:events) do |r|
      r.primary
      r.string :eventname
    end
    m.n_to_m(:user, :events, :relationname => :event_attendees)

    m.relation(:login_attempts) do |r|
      r.primary
      r.date :when
      # user_id field will be added by relation
    end
  end

Second, ask the library to write a new migration, eg targeting ActiveRecord

  migrationDir = "migrations"
  Relational::Migrate.new(model, Relational::ActiveRecord::MigrationHelper.new(:force_review => false), migrationDir) \
    .migrate

Third: ask the libraries to derive models:

  Relational::ActiveRecord::ModelGenerator.new(model).createmodels(Relational)

Fourth: Have fun creating forms:

  form = Form.new(
    :fields => User.form_fieds([:useranme,:login,:password])
    :ondata => do |data|
      // create user, sign in, ...
    end
  )
  this should somehow implement
    - controller
    - view
